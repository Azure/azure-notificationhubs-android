apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

def VERSION = '1.0.1'
def PUBLISH_ARTIFACT_ID = 'notification-hubs-android-sdk'
def GROUP_ID = 'com.microsoft.azure'

def IS_CI = project.hasProperty('isCI') ? Boolean.valueOf(isCI) : false
def REPO_URL = IS_CI ? "file://" + "$System.env.BUILD_ARTIFACTSTAGINGDIRECTORY" : "$buildDir/repo"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName VERSION
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "push-provider"
    productFlavors {
        fcm {
            dimension "push-provider"
            versionNameSuffix "-fcm"
        }
        adm {
            dimension "push-provider"
            versionNameSuffix "-adm"
        }
        baidu {
            dimension "push-provider"
            versionNameSuffix "-baidu"
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'

    sourceSets {
        main {
            jniLibs.srcDirs = ['jniLibs']
        }
    }
}

repositories {
    google()
    maven { url 'https://jitpack.io' }
}

configurations {
    javadocDeps
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.android.volley:volley:1.1.1'
    implementation files('libs\\pushservice-7.0.0.27.jar')
    fcmApi 'com.google.firebase:firebase-messaging:20.2.4'

    javadocDeps 'com.android.support:support-annotations:28.0.0'

    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestUtil 'androidx.test:orchestrator:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'

    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'androidx.test:runner:1.2.0'
    testImplementation 'androidx.test:rules:1.2.0'
    testImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation 'org.json:json:20200518'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.5'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.5'
    testImplementation 'org.powermock:powermock-module-junit4-rule-agent:1.6.5'
}


task clearJar(type: Delete) {
    delete 'build/fcmRelease/' + PUBLISH_ARTIFACT_ID + '-' + version + '.jar'
}

task writeVersionFile {
    doLast {
        File versionFileHandle = file(REPO_URL + "/com/microsoft/azure/notification-hubs-android-sdk/version.txt")
        versionFileHandle.write VERSION
    }
}

// step 1
task makeJar(type: Copy) {
    from('build/intermediates/aar_main_jar/fcmRelease/')
    into('build/fcmRelease/')
    include('classes.jar')
    rename ('classes.jar', PUBLISH_ARTIFACT_ID + '-' +  version + '.jar')
}

makeJar.dependsOn(clearJar, build)

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId = GROUP_ID
                artifactId = PUBLISH_ARTIFACT_ID
                version = VERSION

                from components.fcmRelease
            }
        }
        repositories {
            maven {
                name = 'BuildDir'
                url = REPO_URL
            }
        }
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocDeps

    android.libraryVariants.all { variant ->
      owner.classpath += variant.javaCompile.classpath
    }

    exclude '**/*.md'

    def capturedOutput = []
    def listener = { capturedOutput << it } as StandardOutputListener
    doFirst {
        logging.addStandardErrorListener(listener)
        logging.addStandardOutputListener(listener)
    }
    doLast {
        logging.removeStandardOutputListener(listener)
        logging.removeStandardErrorListener(listener)
        def errorMessage = ""
        capturedOutput.each { e ->
            if(e.toString() =~ " warning: " || e.toString() =~ " error: ") {
                errorMessage += "\n" + e.toString()
            }
        }

        if (errorMessage != "") {
            throw new GradleException(errorMessage);
        }
    }
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
    archives file : file('build/fcmRelease/' + PUBLISH_ARTIFACT_ID + '-' + version + '.jar')
}