apply plugin: 'com.android.library'
apply plugin: 'maven'

def myProject = project

def isCI = project.hasProperty('isCI') ? Boolean.valueOf(isCI) : false

def BINTRAY_USERNAME = "$System.env.BINTRAY_USERNAME"
def BINTRAY_APIKEY = "$System.env.BINTRAY_APIKEY"

ext {
    PUBLISH_ARTIFACT_ID = 'azure-notifications-handler'
    REPO_URL = 'https://api.bintray.com/maven/microsoftazuremobile/SDK/Notifications-Handler'
}

group = 'com.microsoft.azure'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.google.firebase:firebase-core:16.0.8'
    implementation 'com.google.firebase:firebase-messaging:17.5.0'
}

// step 2
uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = myProject.group
        pom.artifactId = PUBLISH_ARTIFACT_ID
        pom.version = myProject.version
        repository (
            url: isCI ? "file://" + "$System.env.BUILD_ARTIFACTSTAGINGDIRECTORY" : REPO_URL
        ) {
            authentication(
                userName: BINTRAY_USERNAME,
                password: BINTRAY_APIKEY
            )
        }
    }
}

task clearJar(type: Delete) {
    delete 'build/release/' + PUBLISH_ARTIFACT_ID + '-' + myProject.version + '.jar'
}

task clearAar(type: Delete) {
    delete 'build/release/' + PUBLISH_ARTIFACT_ID + '-' + myProject.version + '.aar'
}

// step 1
task makeJar(type: Copy) {
    from('build/intermediates/aar_main_jar/release')
    into('build/release/')
    include('classes.jar')
    rename ('classes.jar', PUBLISH_ARTIFACT_ID + '-' +  myProject.version + '.jar')
}

makeJar.dependsOn(clearJar, build)

task makeAar(type: Copy) {
    from('build/outputs/aar/')
    into('build/release/')
    include('sdk-release.aar')
    include('notifications-handler-release.aar')
    rename ('sdk-release.aar', PUBLISH_ARTIFACT_ID + '-' +  myProject.version + '.aar')
    rename ('notifications-handler-release.aar', PUBLISH_ARTIFACT_ID + '-' +  myProject.version + '.aar')
}

makeAar.dependsOn(clearAar, build)

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    //archives androidJavadocsJar
    archives file : file('build/release/' + PUBLISH_ARTIFACT_ID + '-' + myProject.version + '.jar')
}
