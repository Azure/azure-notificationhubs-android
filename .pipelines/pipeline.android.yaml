trigger:
- main
- push-refresh
- v1-preview

pr:
- main
- push-refresh
- v1-preview

pool:
  name: Hosted Mac Internal
  demands: java

steps:
##- task: Gradle@2
##  displayName: '(Non-Emulator) SDK Tests'
##  inputs:
##    options: '-p notification-hubs-sdk'
##    tasks: 'cleanTest test '

- bash: |
   #!/usr/bin/env bash
   
   ##set -ev
   
   # List available system-images images
   ##$ANDROID_HOME/tools/bin/sdkmanager --list | grep system-images
   
   ##SYSTEM_IMAGE='system-images;android-29;google_apis;x86'
   
   # Install AVD files
   ##echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install ${SYSTEM_IMAGE}
   
   # Create emulator
   ##echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n xamarin_android_emulator -k ${SYSTEM_IMAGE} --force
   
   ##$ANDROID_HOME/emulator/emulator -list-avds
   
   ##echo "Starting emulator"
   
   # Start emulator in background
   ##nohup $ANDROID_HOME/emulator/emulator -avd xamarin_android_emulator -no-snapshot > /dev/null 2>&1 &
   ##$ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
   
   ##$ANDROID_HOME/platform-tools/adb devices
   
   ##echo "Emulator started"
  displayName: 'Install and Run Android Emulator'

- task: DownloadSecureFile@1
  displayName: 'Download Google Services profile'
  name: googleServices
  inputs:
    secureFile: google-services.json

- task: Bash@3
  displayName: 'Copy Google Service profile to application roots'
  inputs:
    targetType: 'inline'
    script: |
      cp $(googleServices.secureFilePath) ./notification-hubs-sample-app-legacy
      cp $(googleServices.secureFilePath) ./notification-hubs-sample-app-java

##- task: Gradle@2
##  displayName: 'Build and Test Sample App'
##  inputs:
##    options: '-PisCI="true"'
##    tasks: 'notification-hubs-sample-app-java:test notification-hubs-sample-app-java:connectedAndroidTest'
##    publishJUnitResults: false

- task: Gradle@2
  displayName: 'Create assets for publication'
  inputs:
    options: '-PisCI="true"'
    tasks: 'makeJar notification-hubs-sdk:publishGeneralPublicationToBuildDirRepository notification-hubs-sdk:publishFcmPublicationToBuildDirRepository notification-hubs-sdk:writeVersionFile'
    publishJUnitResults: false


##- task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
##  displayName: 'ESRP CodeSigning'
##  inputs:
##    ConnectedServiceName: 'ESRP CodeSigning'
##    FolderPath: '$(build.artifactstagingdirectory)/com/microsoft/azure'
##    Pattern: '*.jar, *.aar'
##    signConfigType: inlineSignParams
##    inlineOperation: |
##     [
##         {
##             "keyCode": "CP-447347-Java",
##             "operationSetCode": "JavaSign",
##             "parameters": [
##                 {
##                     "parameterName": "SigAlg",
##                     "parameterValue": "SHA256withRSA"
##                 },
##                 {
##                     "parameterName": "TimeStamp",
##                     "parameterValue": "-tsa \"http://sha256timestamp.ws.symantec.com/sha256/timestamp\""
##                 }
##             ],
##             "toolName": "Jarsigner.exe",
##             "toolVersion": "V1.8.112"
##         },
##         {
##             "keyCode": "CP-447347-Java",
##             "operationSetCode": "JavaVerify",
##             "parameters": null,
##             "toolName": "Jarsigner.exe",
##             "toolVersion": "V1.8.112"
##         }
##     ]
##  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

##- task: PublishBuildArtifacts@1
##  displayName: 'Publish Artifact'
##  inputs:
##    PathtoPublish: '$(build.artifactstagingdirectory)'
##    ArtifactName: /
##  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- bash: |
    echo "sources"
    find $(Build.SourcesDirectory) -name '*'
    echo "staging"
    find $(Build.StagingDirectory) -name '*'
    echo "artifacts"
    find $(Build.ArtifactStagingDirectory) -name '*'

- bash: |
    # Get AZCopy
    wget -O azcopy_v10.zip https://aka.ms/downloadazcopy-v10-mac && unzip azcopy_v10.zip
    mv azcopy_darwin_*/azcopy azcopy
    
    # Log in
    export AZCOPY_SPA_CLIENT_SECRET=$(azuresdkpartnerdrops-service-principal-key)
    azcopy login --service-principal --application-id cfb5fe52-8bb2-4901-9056-70449fa2df96
    
    # Get version
    VERSION = `cat $(Build.ArtifactStagingDirectory)/com/microsoft/azure/notification-hubs-android-sdk/version.txt`
    cat $(Build.ArtifactStagingDirectory)/com/microsoft/azure/notification-hubs-android-sdk/version.txt
    echo "Version: $VERSION"

    # Copy to Blob Storage
    ANDROID_SOURCE_PATH="$(Build.ArtifactStagingDirectory)/com/microsoft/azure/notification-hubs-android/sdk/$VERSION"
    FCM_SOURCE_PATH="$(Build.ArtifactStagingDirectory)/com/microsoft/azure/notification-hubs-android-sdk-fcm/sdk/$VERSION"
    BLOB_PATH="azure-notificationhubs/java"
    DEST_URL=https://azuresdkpartnerdrops.blob.core.windows.net/drops/$BLOB_PATH
    
    echo "Source Path: $ANDROID_SOURCE_PATH"
    echo "Source Path: $FCM_SOURCE_PATH"
    echo "Blob Path: $BLOB_PATH"
    echo "Destination URL: $DEST_URL"
    
    #azcopy copy $ANDROID_SOURCE_PATH $DEST_URL --recursive
    #azcopy copy $FCM_SOURCE_PATH $DEST_URL --recursive
  displayName: "AzCopy"